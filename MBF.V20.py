#Encrypted with Crypton
#Created by OVERDOSIS
import base64
exec(base64.b64decode("     1cG9fbHVwb19taWx6dSgpCiAgICAgbXVsYWkoKQogICAgIGx1cG9fbHVwb19taWx6dSgpCiAgICAgbWVudSgpCiAgICAgcGVhaygpCiAgICAgbWJmdjIoKQogICAgIHV3dXRjKCkK"))
